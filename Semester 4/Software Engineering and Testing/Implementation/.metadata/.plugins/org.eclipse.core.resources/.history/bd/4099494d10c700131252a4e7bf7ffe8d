package Cinema;
import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionListener;
import java.sql.*;
import java.awt.event.*;
import java.sql.*;

import javax.swing.border.LineBorder;

public class GUI extends JFrame implements ActionListener
{
	public static void main(String[] args)
	{
		GUI gui = new GUI();
	}
	
	
	public static ConnectDB db = new ConnectDB();
	public static GUITemplate temp = new GUITemplate();

	
	JDesktopPane desktop = new JDesktopPane();
	JInternalFrame loginFrame = new JInternalFrame(), registerFrame = new JInternalFrame(), shoppingFrame = new JInternalFrame(), maintenanceFrame = new JInternalFrame(), checkoutFrame = new JInternalFrame();
	JLabel intro01, intro02, signIn, username, password, empty, register, firstName, lastName, createUsername, createPassword, emailAddress, contactNumber, address, registerHeader;
	JPanel center, centerTop, centerMiddle, centerMiddleGrid, centerBottom;
	JTextField usernameField = new JTextField() , firstNameField, lastNameField, createUsernameField, emailAddressField, contactNumberField, addressField;
	JPasswordField passwordField = new JPasswordField(), createPasswordField;
	JButton login, signUp, registerButton;
	
	
	
	
	GUI()
	{
		setContentPane(desktop);
		
		
		registerFrame();
		
		shoppingFrame();
		
		maintenanceFrame();
		
		checkoutFrame();
		
		setSize(500, 500);
		setVisible(true);
		
		
	}
	

	
	


	
	public void registerFrame()
	{
		temp.header(registerFrame);
		
		temp.footer(registerFrame);
		
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		JPanel center = new JPanel();
		center.setLayout(new GridLayout(7, 7));
		
		registerHeader = new JLabel("Please fill out the register form");
		
		firstName = new JLabel("First name:");
		lastName = new JLabel("Surname:");
		createUsername = new JLabel("Username:");
		createPassword = new JLabel("Password:");
		emailAddress = new JLabel("Email address:");
		contactNumber = new JLabel("Contact number:");
		address = new JLabel("Address:");
			
		firstNameField = new JTextField();
		lastNameField = new JTextField();
		createUsernameField = new JTextField();
		createPasswordField = new JPasswordField();
		emailAddressField = new JTextField();
		contactNumberField = new JTextField();
		addressField = new JTextField();
		
		registerButton = new JButton("Register");
		
		center.add(firstName);
		center.add(firstNameField);
		center.add(lastName);
		center.add(lastNameField);
		center.add(createUsername);
		center.add(createUsernameField);
		center.add(createPassword);
		center.add(createPasswordField);
		center.add(emailAddress);
		center.add(emailAddressField);
		center.add(contactNumber);
		center.add(contactNumberField);
		center.add(address);
		center.add(addressField);
		
		panel.add(registerHeader, BorderLayout.NORTH);
		panel.add(center, BorderLayout.CENTER);
		panel.add(registerButton, BorderLayout.SOUTH);
		registerFrame.add(panel, BorderLayout.CENTER);
		desktop.add(registerFrame);
		
		registerFrame.setSize(484, 462);
		registerFrame.setVisible(true);
		
	}
	
	public void shoppingFrame()
	{
		
		Connection connect;
		String host = "jdbc:mysql://localhost/cinema";
		String username = "root";
		String password = "";
		
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		JLabel [] detail = new JLabel[15];
		JPanel [] panels = new JPanel[15];
		JPanel centerPanel  = new JPanel();
		centerPanel.setLayout(new GridLayout(15, 1));
		
		try
		{
			connect = DriverManager.getConnection(host, username, password);
			PreparedStatement statement[] = new PreparedStatement[15];
			ResultSet result[] = new ResultSet[15];
			for(int i = 0; i < 15; i++)
			{
				statement[i] = connect.prepareStatement("Select * from movies WHERE id IN(" + (i+1) + ")");
				result[i] = statement[i].executeQuery();
			}
			
	
		
				
				for(int i = 0; i < 15; i++)
				{
					result[i].next();
					detail[i] = new JLabel(result[i].getString(2) + "  " + result[i].getString(3) + "  " + result[i].getString(4) + "  " + result[i].getString(5) + "  " + result[i].getString(6));
					panels[i] = new JPanel();
					panels[i].setBorder(new LineBorder(Color.blue, 2));
					panels[i].add(detail[i]);
					centerPanel.add(panels[i]);
				}
				
		}
		
		catch(SQLException e)
		{
			// System.out.println("Not all movies slots are filled in");
		}
		
		catch(Exception e)
		{
			System.out.println("Error");
		}
		JScrollPane scrollPane = new JScrollPane(centerPanel);

		shoppingFrame.add(scrollPane, BorderLayout.CENTER);
		temp.header(shoppingFrame);
		temp.footer(shoppingFrame);
		
		desktop.add(shoppingFrame);
		
		shoppingFrame.setSize(484, 462);
		shoppingFrame.setVisible(true);
	}
	
	public void maintenanceFrame()
	{
		Connection connect;
		String host = "jdbc:mysql://localhost/cinema";
		String username = "root";
		String password = "";
		
		JPanel panel = new JPanel();
		panel.setLayout(new BorderLayout());
		JPanel topPanel = new JPanel();
		topPanel.setLayout(new BorderLayout());
		JPanel centerPanel = new JPanel();
		centerPanel.setLayout(new BorderLayout());
		JPanel bottomPanel = new JPanel();
		bottomPanel.setLayout(new BorderLayout());
		Font headerFont = new Font("Ariel", Font.BOLD, 14);
		//-------------------------------------------------------------------------------
		//-------- View Current Movies ---------------------------
		JLabel currentMovies = new JLabel("View current movies");
		currentMovies.setFont(headerFont);
		currentMovies.setHorizontalAlignment(SwingConstants.CENTER);
		topPanel.add(currentMovies, BorderLayout.NORTH);
		JTextArea moviesTextArea = new JTextArea();
		moviesTextArea.setEditable(false);
		
		String [] movies = new String[15];
		
		try
		{
			connect = DriverManager.getConnection(host, username, password);
			PreparedStatement statement[] = new PreparedStatement[15];
			ResultSet result[] = new ResultSet[15];
			for(int i = 0; i < 15; i++)
			{
				statement[i] = connect.prepareStatement("Select * from movies WHERE id IN(" + (i) + ")");
				result[i] = statement[i].executeQuery();
			}
			
			for(int i = 0; i < 15; i++)
			{
				result[i].next();
				movies[i] = result[i].getString(1) + ".  " + result[i].getString(2) + "  " + result[i].getString(3) + "  " + result[i].getString(4) + "  " + result[i].getString(5) + "  " + result[i].getString(6);
				moviesTextArea.append(movies[i] + "\n"); 
				topPanel.add(moviesTextArea, BorderLayout.SOUTH);
			}	
			
			
		}
		
		catch(SQLException e)
		{
			// System.out.println("Not all users slots are filled in");
		}
		
		catch(Exception e)
		{
			System.out.println("Error");
		}
		
		

		
		//--------------------------------------------------------------------------------
		//----------- Add Movie ---------------------------
		JPanel centerTopPanel = new JPanel();
		centerTopPanel.setLayout(new BorderLayout());
		centerTopPanel.setBorder(new LineBorder(Color.cyan, 10));
		JPanel addMoviePanel = new JPanel();
		addMoviePanel.setLayout(new GridLayout(8, 2));
		
		JLabel addMovieHeader = new JLabel("Add Movie");
		addMovieHeader.setFont(headerFont);
		addMovieHeader.setHorizontalAlignment(SwingConstants.CENTER);
		JLabel [] addLabel = new JLabel[6];
		JTextField [] addField = new JTextField[6];
		String [] addString = {"Id: ", "Movie: ", "Date: ", "Time 1: ", "Time 2: ", "Time 3: "};
		JLabel empty = new JLabel();
		JButton addButton = new JButton("Add");
		for(int i = 0; i < 6; i++)
		{
			addLabel[i] = new JLabel(addString[i]);
			addField[i] = new JTextField();
			addMoviePanel.add(addLabel[i]);
			addMoviePanel.add(addField[i]);
		}
		addMoviePanel.add(empty);
		addMoviePanel.add(addButton);
		centerTopPanel.add(addMovieHeader, BorderLayout.NORTH);
		centerTopPanel.add(addMoviePanel, BorderLayout.CENTER);
		centerPanel.add(centerTopPanel, BorderLayout.CENTER);
		
		//--------------------------------------------------------------------------------
		//----------- Remove Movie ---------------------------
		JPanel centerBottomPanel = new JPanel();
		centerBottomPanel.setLayout(new GridLayout(5, 1));
		centerBottomPanel.setBorder(new LineBorder(Color.cyan, 10));
		JPanel enterIdPanel = new JPanel();
		enterIdPanel.setLayout(new GridLayout(1, 1));
		JPanel enterMoviePanel = new JPanel();
		enterMoviePanel.setLayout(new GridLayout(1, 1));
		JPanel removeMoviePanel = new JPanel();
		removeMoviePanel.setLayout(new GridLayout(1, 1));

		JLabel removeMovieHeader = new JLabel("Remove Movie");
		removeMovieHeader.setFont(headerFont);
		removeMovieHeader.setHorizontalAlignment(SwingConstants.CENTER);
		centerBottomPanel.add(removeMovieHeader);
		
		JLabel enterId = new JLabel("Enter Id");
		JTextField enterIdField = new JTextField();
		enterIdPanel.add(enterId);
		enterIdPanel.add(enterIdField);
		centerBottomPanel.add(enterIdPanel);
		
		JLabel orLabel = new JLabel("OR");
		orLabel.setHorizontalAlignment(SwingConstants.CENTER);
		centerBottomPanel.add(orLabel);
		
		JLabel enterMovie = new JLabel("Movie name");
		JTextField enterMovieField = new JTextField();
		empty = new JLabel();
		enterMoviePanel.add(enterMovie);
		enterMoviePanel.add(enterMovieField);
		centerBottomPanel.add(enterMoviePanel);
		
		empty = new JLabel();
		JButton removeMovieButton = new JButton("Remove");
		removeMoviePanel.add(empty);
		removeMoviePanel.add(removeMovieButton);
		centerBottomPanel.add(removeMoviePanel);
		
		centerPanel.add(centerBottomPanel, BorderLayout.SOUTH);
		
		//--------------------------------------------------------------------------------
		//--------------- View Users ---------------------------
		JPanel bottomTopPanel = new JPanel();
		bottomTopPanel.setLayout(new BorderLayout());
		JPanel enterNamePanel = new JPanel();
		enterNamePanel.setLayout(new GridLayout(1,2));
		
		JLabel viewUsers = new JLabel("View Users");
		viewUsers.setFont(headerFont);
		viewUsers.setHorizontalAlignment(SwingConstants.CENTER);
		bottomTopPanel.add(viewUsers, BorderLayout.NORTH);
		JTextArea usersTextArea = new JTextArea();
		usersTextArea.setEditable(false);
		String [] users = new String[100];
		
		try
		{
			connect = DriverManager.getConnection(host, username, password);
			PreparedStatement statement[] = new PreparedStatement[100];
			ResultSet resultUsers[] = new ResultSet[100];
			for(int i = 0; i < 100; i++)
			{
				statement[i] = connect.prepareStatement("Select * from login WHERE id IN(" + (i) + ")");
				resultUsers[i] = statement[i].executeQuery();
			}
			
			for(int i = 0; i < 100; i++)
			{
				resultUsers[i].next();
				users[i] = resultUsers[i].getString(1) + ".  " + resultUsers[i].getString(2) + "  " + resultUsers[i].getString(3);
				usersTextArea.append(users[i] + "\n");  
				bottomTopPanel.add(usersTextArea, BorderLayout.SOUTH);
			}			
		}
		
		catch(SQLException e)
		{
			// System.out.println("Not all users slots are filled in");
		}
		
		catch(Exception e)
		{
			System.out.println("Error");
		}
		
		bottomPanel.add(bottomTopPanel, BorderLayout.NORTH);
		
		
		//--------------------------------------------------------------------------------
		//--------------- Remove Users ---------------------------
		JPanel bottomBottomPanel = new JPanel();
		bottomBottomPanel.setLayout(new BorderLayout());
		bottomBottomPanel.setBorder(new LineBorder(Color.cyan, 10));
		JPanel removePanel = new JPanel();
		removePanel.setLayout(new GridLayout(2,2));
		
		JLabel removeUsers = new JLabel("Remove User");
		removeUsers.setFont(headerFont);
		removeUsers.setHorizontalAlignment(SwingConstants.CENTER);
		bottomBottomPanel.add(removeUsers, BorderLayout.NORTH);
		
		JLabel removeId = new JLabel("Enter Id");
		JTextField removeIdField = new JTextField();
		empty = new JLabel();
		JButton removeIdButton = new JButton("Remove");
		removePanel.add(removeId);
		removePanel.add(removeIdField);
		removePanel.add(empty);
		removePanel.add(removeIdButton);
		bottomBottomPanel.add(removePanel, BorderLayout.CENTER);
		
		
		bottomPanel.add(bottomBottomPanel, BorderLayout.SOUTH);
		
		
		//--------------------------------------------------------------------------------
		panel.add(topPanel, BorderLayout.NORTH);
		panel.add(centerPanel, BorderLayout.CENTER);
		panel.add(bottomPanel, BorderLayout.SOUTH);
		JScrollPane scrollPane = new JScrollPane(panel);
		maintenanceFrame.add(scrollPane);
		temp.header(maintenanceFrame);
		temp.footer(maintenanceFrame);
		
		desktop.add(maintenanceFrame);
		
		maintenanceFrame.setSize(484, 462);
		maintenanceFrame.setVisible(true);
	}
	
	public void checkoutFrame()
	{
		
		temp.header(checkoutFrame);
		temp.footer(checkoutFrame);
		
		desktop.add(checkoutFrame);
		
		checkoutFrame.setSize(484, 462);
		checkoutFrame.setVisible(false);
	}
	
	
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource() == login)
		{
			try{
				db.connect();
			}
			
			catch(Exception f)
			{
				System.out.println("An error occured while trying to add data to database");
			}
			
			

		}
		
	}

	
}
